import argparse
import os
parser = argparse.ArgumentParser()
parser.add_argument('--use_cuda', action='store_true', default=True)
parser.add_argument('--dataset', type=str, default='cifar10', help='attack dataset')
parser.add_argument('--model', type=str, default="orain_mask_0.000.pth")
parser.add_argument('--start', type=int, default=0)
parser.add_argument('--num_class', type=int, default=100)
parser.add_argument('--noise_repeat', type=int, default=1)
parser.add_argument('--head_fusion', type=str, default='max')
parser.add_argument('--discard_ratio', type=float, default=0.9)
parser.add_argument('--addnoise', action='store_true', default=False)
parser.add_argument('--metric', type=str, default="cos-sim")
parser.add_argument('--atk_output', action='store_true', default=False)
parser.add_argument("--local-rank", type=int, default=0, help="number of cpu threads to use during batch generation")
args = parser.parse_args()
# os.system("python -m torch.distributed.launch --nnodes=1 --nproc_per_node=2 main.py --set 2")
# os.system("python -m torch.distributed.launch --nnodes=1 --nproc_per_node=2 main.py --nums 27")
# os.system("python -m torch.distributed.launch --nnodes=1 --nproc_per_node=2 main.py --nums 54")
# os.system("python -m torch.distributed.launch --nnodes=1 --nproc_per_node=2 main.py --nums 108")
# os.system("python mia_attn.py --model orain_pre.pth")
# os.system("python mia_attn.py --model orain_mask_0.000.pth")
# os.system("python mia_attn.py --model orain_mask_0.051.pth --dataset cifar100")
# os.system("python mia_attn.py --model orain_mask_0.255.pth --dataset cifar100")
# os.system("python mia_attn.py --model orain_mask_0.459.pth --dataset cifar100")
# os.system("python mia_attn.py --model orain_mask_0.663.pth --dataset cifar100")
# os.system("python mia_attn.py --model orain_mask_0.867.pth --dataset cifar100")
# os.system("python mia_attn.py --model orain_mask_0.000.pth --atk_output")
# os.system("python mia_attn.py --model orain_mask_0.000.pth --dataset ImageNet100 --atk_output")
# os.system("python mia_attn.py --model orain_mask_0.138.pth --dataset ImageNet100 --atk_output")
# os.system("python mia_attn.py --model orain_mask_0.255.pth --dataset cifar100")
# os.system("python mia_attn.py --model orain_mask_0.357.pth --dataset cifar100")
# os.system("python mia_attn.py --model orain_mask_0.459.pth --dataset cifar100")
# os.system("python mia_attn.py --model orain_mask_0.561.pth --dataset cifar100")
# os.system("python mia_attn.py --model orain_mask_0.663.pth --dataset cifar100")
# os.system("python mia_attn.py --model orain_mask_0.765.pth --dataset cifar100")
# os.system("python mia_attn.py --model orain_mask_0.867.pth --dataset cifar100")
# os.system("python mia_attn.py --model orain_mask_0.969.pth --dataset cifar100")
os.system("python mia_attn.py --model orain_mask_0.000.pth{}{}".format(" --dataset "+args.dataset, " --atk_output" if args.atk_output else ""))
os.system("python mia_attn.py --model orain_mask_0.138.pth{}{}".format(" --dataset "+args.dataset, " --atk_output" if args.atk_output else ""))
os.system("python mia_attn.py --model orain_mask_0.276.pth{}{}".format(" --dataset "+args.dataset, " --atk_output" if args.atk_output else ""))
os.system("python mia_attn.py --model orain_mask_0.413.pth{}{}".format(" --dataset "+args.dataset, " --atk_output" if args.atk_output else ""))
os.system("python mia_attn.py --model orain_mask_0.551.pth{}{}".format(" --dataset "+args.dataset, " --atk_output" if args.atk_output else ""))
os.system("python mia_attn.py --model orain_mask_0.689.pth{}{}".format(" --dataset "+args.dataset, " --atk_output" if args.atk_output else ""))
os.system("python mia_attn.py --model orain_mask_0.827.pth{}{}".format(" --dataset "+args.dataset, " --atk_output" if args.atk_output else ""))
os.system("python mia_attn.py --model orain_mask_0.964.pth{}{}".format(" --dataset "+args.dataset, " --atk_output" if args.atk_output else ""))
# os.system("python -m torch.distributed.launch --nnodes=1 --nproc_per_node=2 main.py --dataset cifar10")
# os.system("python -m torch.distributed.launch --nnodes=1 --nproc_per_node=2 main.py --dataset ImageNet100")